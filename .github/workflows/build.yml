name: Build and Bundle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions block
permissions:
  contents: read
  issues: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Create labels
        run: |
          # Create security label if it doesn't exist
          gh label create "security" --color "FF0000" --description "Security related issues" || true
          # Create high-priority label if it doesn't exist
          gh label create "high-priority" --color "FF0000" --description "High priority issues" || true

      - name: Run security audit
        run: |
          # Run npm audit and store the output
          AUDIT_OUTPUT=$(npm audit --json || true)
          
          # Check if the output is valid JSON and not empty
          if ! echo "$AUDIT_OUTPUT" | jq empty 2>/dev/null; then
            echo "Error: Invalid JSON output from npm audit"
            echo "Raw output:"
            echo "$AUDIT_OUTPUT"
            exit 1
          fi
          
          echo "$AUDIT_OUTPUT" > audit-report.json
          
          # Check if there are any vulnerabilities
          if ! jq -e '.metadata.vulnerabilities' audit-report.json > /dev/null; then
            echo "No vulnerability data found in audit report"
            exit 0
          fi
          
          # Use jq to check for high or critical vulnerabilities
          if jq -e '.metadata.vulnerabilities.high > 0 or .metadata.vulnerabilities.critical > 0' audit-report.json > /dev/null; then
            echo "Found high or critical vulnerabilities!"
            
            # Create a detailed report
            echo "## Security Audit Report" > security-report.md
            echo "### Summary" >> security-report.md
            echo "| Severity | Count |" >> security-report.md
            echo "|----------|-------|" >> security-report.md
            
            # Safely extract vulnerability counts with fallback to 0
            CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' audit-report.json)
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' audit-report.json)
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' audit-report.json)
            LOW=$(jq -r '.metadata.vulnerabilities.low // 0' audit-report.json)
            
            echo "| Critical | $CRITICAL |" >> security-report.md
            echo "| High     | $HIGH |" >> security-report.md
            echo "| Moderate | $MODERATE |" >> security-report.md
            echo "| Low      | $LOW |" >> security-report.md
            echo "" >> security-report.md
            
            echo "### High and Critical Vulnerabilities" >> security-report.md
            echo "" >> security-report.md
            
            # Extract and format each high/critical vulnerability
            if jq -e '.advisories' audit-report.json > /dev/null; then
              # Get all advisories and filter for high/critical
              jq -r '.advisories | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | 
                "#### \(.value.title) (Severity: \(.value.severity))\n" +
                "- **Package:** \(.value.module_name)\n" +
                "- **Version:** \(.value.vulnerable_versions)\n" +
                "- **Fixed in:** \(.value.patched_versions)\n" +
                "- **Overview:** \(.value.overview)\n" +
                "- **Recommendation:** \(.value.recommendation)\n" +
                "- **References:** \(.value.references)\n" +
                "- **Path:** \(.value.findings[0].paths[0])\n"' audit-report.json >> security-report.md
            else
              # Try alternative format (some npm versions use different structure)
              if jq -e '.vulnerabilities' audit-report.json > /dev/null; then
                jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | 
                  "#### \(.value.name) (Severity: \(.value.severity))\n" +
                  "- **Package:** \(.value.name)\n" +
                  "- **Version:** \(.value.range)\n" +
                  "- **Fixed in:** \(.value.fixAvailable.version // "No fix available")\n" +
                  "- **Overview:** \(.value.description // "No description available")\n" +
                  "- **Recommendation:** Update to version \(.value.fixAvailable.version // "latest")\n" +
                  "- **References:** \(.value.references // "No references available")\n"' audit-report.json >> security-report.md
              else
                echo "No detailed vulnerability information available in the expected format." >> security-report.md
                echo "Raw audit output:" >> security-report.md
                echo "\`\`\`json" >> security-report.md
                cat audit-report.json >> security-report.md
                echo "\`\`\`" >> security-report.md
              fi
            fi
            
            # Create an issue with the findings
            gh issue create \
              --title "Security Audit: High/Critical Vulnerabilities Found" \
              --body-file security-report.md \
              --label "security" \
              --label "high-priority"
            
            exit 1
          else
            echo "No high or critical vulnerabilities found."
          fi

  build:
    needs: security-scan
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        load: true
        tags: electron-secure-defaults:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run build in container
      run: |
        docker run --rm \
          -v "$(pwd)/package:/app/package" \
          electron-secure-defaults:latest

    - name: Build DMG locally
      run: |
        npm install
        npm run build
        npm run package:mac

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-secure-defaults
        path: |
          package/*.dmg
          package/*.zip

  notify:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create build notification
        if: needs.build.result == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            const buildUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const commitUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}`;
            
            const body = `
            ## Build Completed Successfully! ðŸŽ‰

            ### Build Details:
            - **Build URL:** [View Build](${buildUrl})
            - **Commit:** [${context.sha.substring(0, 7)}](${commitUrl})
            - **Branch:** ${context.ref.replace('refs/heads/', '')}
            - **Triggered by:** ${context.actor}
            - **Build completed at:** ${new Date().toISOString()}

            You can download the packaged application from the GitHub Actions artifacts.
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Build Success: ${context.ref.replace('refs/heads/', '')} - ${new Date().toISOString()}`,
              body: body,
              labels: ['build-success']
            }); 